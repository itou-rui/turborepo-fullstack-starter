name: "Setup Google Cloud Load Balancer"

on:
  workflow_call:
    inputs:
      google-cloud-region:
        type: string
        required: true
      google-cloud-env:
        type: string
        required: true
      app_name:
        type: string
        required: true
      app:
        type: string
        required: true
      domain:
        type: string
    secrets:
      google_cloud_project_number:
        required: true

jobs:
  check-backend-service:
    runs-on: ubuntu-latest
    outputs:
      needs_setup: ${{ steps.check.outputs.needs_setup }}
    steps:
      - name: Check Backend Service
        id: check-backend
        run: |
          set -e
          if gcloud compute backend-services describe ${{ inputs.app_name }}-${{ inputs.app }}-${{ inputs.google-cloud-env }}-backend --global; then
            echo "Backend service exists"
            echo "needs_setup=false" >> $GITHUB_OUTPUT
          else
            echo "Backend service does not exist"
            echo "needs_setup=true" >> $GITHUB_OUTPUT
          fi

      - name: Check URL Map
        id: check-urlmap
        if: inputs.app == 'web'
        run: |
          set -e
          if gcloud compute url-maps describe ${{ inputs.google-cloud-env }}-load-balancer --global; then
            echo "URL Map exists"
          else
            echo "URL Map does not exist"
            echo "needs_setup=true" >> $GITHUB_OUTPUT
          fi

      - name: Check Path Rule
        id: check-pathrule
        if: inputs.app == 'web'
        run: |
          set -e
          MAP_INFO=$(gcloud compute url-maps describe ${{ inputs.google-cloud-env }}-load-balancer --global --format=json)
          if echo "$MAP_INFO" | grep -q "path-matcher"; then
            echo "Path matcher exists"
          else
            echo "Path matcher does not exist"
            echo "needs_setup=true" >> $GITHUB_OUTPUT
          fi

      - name: Check HTTPS Proxy
        id: check-proxy
        if: inputs.app == 'web'
        run: |
          set -e
          if gcloud compute target-https-proxies describe https-proxy --global; then
            echo "HTTPS proxy exists"
          else
            echo "HTTPS proxy does not exist"
            echo "needs_setup=true" >> $GITHUB_OUTPUT
          fi

      - name: Check Forwarding Rule
        id: check-forwarding
        if: inputs.app == 'web'
        run: |
          set -e
          if gcloud compute forwarding-rules describe https-forwarding-rule --global; then
            echo "Forwarding rule exists"
          else
            echo "Forwarding rule does not exist"
            echo "needs_setup=true" >> $GITHUB_OUTPUT
          fi

      - name: Check Domain Mapping
        id: check-domain
        run: |
          set -e
          domain="${{ inputs.domain }}"
          default_domain="${{ inputs.app_name }}-${{ inputs.app }}-${{ inputs.google_cloud_env }}-${{ secrets.google_cloud_project_number }}.${{ inputs.google_cloud_region }}.run.app"

          if [ "$domain" != "$default_domain" ]; then
            if gcloud beta run domain-mappings describe --domain "$domain" --region "${{ inputs.google-cloud-region }}"; then
              echo "Domain mapping exists"
            else
              echo "Domain mapping does not exist"
              echo "needs_setup=true" >> $GITHUB_OUTPUT
            fi
          fi

  create-backend-service:
    needs: check-backend-service
    if: needs.check-backend-service.outputs.needs_setup == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Create Backend Service
        run: |
          gcloud compute backend-services create ${{ inputs.app_name }}-${{ inputs.app }}-${{ inputs.google-cloud-env }}-backend \
              --global \
              --protocol=HTTP2 \
              --port-name=http \
              --timeout=30s \
              --connection-draining-timeout=30s \
              --enable-cdn

      - name: Create URL Map
        if: ${{ inputs.app == 'web' }}
        run: |
          gcloud compute url-maps create ${{ inputs.google-cloud-env }}-load-balancer \
              --default-service "${{ inputs.app }}-backend" \
              --global

      - name: Add Path Rule
        if: ${{ inputs.app == 'web' }}
        run: |
          gcloud compute url-maps add-path-matcher ${{ inputs.google-cloud-env }}-load-balancer \
              --path-matcher-name="path-matcher" \
              --default-service="${{ inputs.app }}-backend" \
              --path-rules="/api/*=api-backend"

      - name: Get SSL Certificates
        id: get-ssl-certificates
        run: |
          set -e
          certificates=$(gcloud compute ssl-certificates list --format="value(name)" --filter="name~'^${{ inputs.app_name }}-${{ inputs.app }}-${{ inputs.google-cloud-env }}'")
          echo "ssl_certificates=$certificates" >> $GITHUB_ENV

      - name: Create SSL Certificates
        if: ${{ env.ssl_certificates != '${{ inputs.app_name }}-${{ inputs.app }}-${{ inputs.google_cloud_env }}' }}
        run: |
          gcloud compute ssl-certificates create ${{ inputs.app_name }}-${{ inputs.app }}-${{ inputs.google_cloud_env }} --domains ${{ inputs.domain }}

      - name: Create HTTPS Proxy
        if: ${{ inputs.app == 'web' }}
        run: |
          set -e
          domain="${{ inputs.domain }}"
          default_domain="${{ inputs.app_name }}-${{ inputs.app }}-${{ inputs.google_cloud_env }}-${{ secrets.google_cloud_project_number }}.${{ inputs.google_cloud_region }}.run.app"
          url_map="${{ inputs.google-cloud-env }}-load-balancer"
          ssl_certificates="${{ env.ssl_certificates }}"

          if [ "$domain" = "$default_domain" ]; then
            gcloud compute target-https-proxies create ${{ inputs.app_name }}-${{ inputs.app }}-${{ inputs.google_cloud_env }} --url-map="$url_map"
          else
            gcloud compute target-https-proxies create ${{ inputs.app_name }}-${{ inputs.app }}-${{ inputs.google_cloud_env }} --url-map="$url_map" --ssl-certificates="$ssl_certificates"
          fi

      - name: Create Forwarding Rule
        if: ${{ inputs.app == 'web' }}
        run: |
          gcloud compute forwarding-rules create https-forwarding-rule \
              --global \
              --target-https-proxy="${{ inputs.app_name }}-${{ inputs.app }}-${{ inputs.google_cloud_env }}" \
              --ports=443

      - name: Mapping Domain
        run: |
          gcloud beta run domain-mappings create \
              --service "${{ inputs.app }}" \
              --domain ${{ inputs.domain }} \
              --region "${{ inputs.google-cloud-region }}"
