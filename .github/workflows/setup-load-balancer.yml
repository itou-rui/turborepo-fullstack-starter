name: "Setup Google Cloud Load Balancer"

on:
  workflow_call:
    inputs:
      app_name:
        type: string
        required: true
      google_cloud_region:
        type: string
        required: true
      google_cloud_service_env:
        type: string
        required: true

jobs:
  setup:
    runs-on: ubuntu-latest
    name: Setup LoadBalancer
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Auth GoogleCloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GOOGLE_CLOUD_IDENTITY_POOL_ID }}/providers/${{ secrets.GOOGLE_CLOUD_IDENTITY_PROVIDER_ID }}"
          service_account: "${{ inputs.app_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
          project_id: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      - name: Create Web Backend Service
        id: create-web-backend-service
        run: |
          SERVICE_NAME="${{ inputs.app_name }}-web-${{ inputs.google_cloud_service_env }}-backend"
          if gcloud compute backend-services describe $SERVICE_NAME --global; then
            echo "Web backend service exists"
          else
            gcloud compute backend-services create $SERVICE_NAME \
              --global \
              --protocol=HTTP2 \
              --port-name=http \
              --timeout=30s \
              --connection-draining-timeout=30s \
              --enable-cdn \
              --load-balancing-scheme=EXTERNAL_MANAGED
          fi
          echo "web_backend_service=$SERVICE_NAME" >> $GITHUB_OUTPUT

      - name: Create Api Backend Service
        id: create-api-backend-service
        run: |
          SERVICE_NAME="${{ inputs.app_name }}-api-${{ inputs.google_cloud_service_env }}-backend"
          if gcloud compute backend-services describe $SERVICE_NAME --global; then
            echo "Api Backend service exists"
          else
            gcloud compute backend-services create $SERVICE_NAME \
              --global \
              --protocol=HTTP2 \
              --port-name=http \
              --timeout=30s \
              --connection-draining-timeout=30s \
              --enable-cdn \
              --load-balancing-scheme=EXTERNAL_MANAGED
          fi
          echo "api_backend_service=$SERVICE_NAME" >> $GITHUB_OUTPUT

      - name: Create Web NEG Backend
        id: create-web-backend-neg
        run: |
          NEG_NAME="${{ inputs.app_name }}-web-${{ inputs.google_cloud_service_env }}-neg"
          SERVICE_NAME="${{ inputs.app_name }}-web-${{ inputs.google_cloud_service_env }}"
          if gcloud compute network-endpoint-groups describe $NEG_NAME \
              --region=${{ inputs.google_cloud_region }} --format=json > /dev/null 2>&1; then
            echo "Web NEG exists"
            echo "is_create=false" >> $GITHUB_OUTPUT
          else
            gcloud compute network-endpoint-groups create $NEG_NAME \
              --network-endpoint-type=serverless \
              --cloud-run-service="$SERVICE_NAME" \
              --region="${{ inputs.google_cloud_region }}"
            echo "is_create=true" >> $GITHUB_OUTPUT
          fi
          echo "web_backend_neg=$NEG_NAME" >> $GITHUB_OUTPUT

      - name: Create API NEG Backend
        id: create-api-backend-neg
        run: |
          NEG_NAME="${{ inputs.app_name }}-api-${{ inputs.google_cloud_service_env }}-neg"
          SERVICE_NAME="${{ inputs.app_name }}-api-${{ inputs.google_cloud_service_env }}"
          if gcloud compute network-endpoint-groups describe $NEG_NAME \
              --region=${{ inputs.google_cloud_region }} --format=json > /dev/null 2>&1; then
            echo "API NEG exists"
            echo "is_create=false" >> $GITHUB_OUTPUT
          else
            gcloud compute network-endpoint-groups create $NEG_NAME \
              --network-endpoint-type=serverless \
              --cloud-run-service="$SERVICE_NAME" \
              --region="${{ inputs.google_cloud_region }}"
            echo "is_create=true" >> $GITHUB_OUTPUT
          fi
          echo "api_backend_neg=$NEG_NAME" >> $GITHUB_OUTPUT

      - name: Add Web NEG Backend
        if: steps.create-web-backend-neg.outputs.is_create == 'true'
        run: |
          gcloud compute backend-services add-backend ${{ steps.create-web-backend-service.outputs.web_backend_service }} \
            --global \
            --network-endpoint-group="${{ steps.create-web-backend-neg.outputs.web_backend_neg }}" \
            --network-endpoint-group-region="${{ inputs.google_cloud_region }}"

      - name: Add Api NEG Backend
        if: steps.create-api-backend-neg.outputs.is_create == 'true'
        run: |
          gcloud compute backend-services add-backend ${{ steps.create-api-backend-service.outputs.api_backend_service }} \
            --global \
            --network-endpoint-group="${{ steps.create-api-backend-neg.outputs.api_backend_neg }}" \
            --network-endpoint-group-region="${{ inputs.google_cloud_region }}"

      - name: Create URL Map
        id: create-url-map
        run: |
          MAP_NAME="${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-load-balancer"
          BRANCH_HOST="${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}"

          if gcloud compute url-maps describe $MAP_NAME --global; then
            echo "URL Map exists"
          else
            echo "Creating new URL Map"
            gcloud compute url-maps create $MAP_NAME \
              --default-service="${{ steps.create-web-backend-service.outputs.web_backend_service }}" \
              --global

          fi
          echo "url_map=$MAP_NAME" >> $GITHUB_OUTPUT

      - name: Add Path Rule
        id: add-path-rule
        run: |
          BRANCH_HOST="${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}"

          gcloud compute url-maps add-path-matcher ${{ steps.create-url-map.outputs.url_map }} \
            --path-matcher-name="$BRANCH_HOST-matcher" \
            --default-service="${{ steps.create-web-backend-service.outputs.web_backend_service }}" \
            --path-rules="/api/*=${{ steps.create-api-backend-service.outputs.api_backend_service }}" \
            --global || true

      - name: Add Host Rule
        run: |
          BRANCH_HOST="${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}"

          gcloud compute url-maps add-host-rule ${{ steps.create-url-map.outputs.url_map }} \
            --hosts="$BRANCH_HOST.${{ vars.DOMAIN }}" \
            --path-matcher-name="$BRANCH_HOST-matcher" \
            --global

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Configure URL Map with Path Rewrite
        id: configure-url-map
        run: |
          gcloud compute url-maps export ${{ steps.create-url-map.outputs.url_map }} \
            --destination url_map_config.yaml \
            --global

          yq eval '.pathMatchers[0].pathRules[0].routeAction.urlRewrite.pathPrefixRewrite = "/"' -i url_map_config.yaml

          gcloud compute url-maps import ${{ steps.create-url-map.outputs.url_map }} \
            --source url_map_config.yaml \
            --global

          rm url_map_config.yaml

      - name: Create SSL Certificates
        id: create-ssl-certificates
        run: |
          CERT_NAME="${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}"

          if ! gcloud compute ssl-certificates describe $CERT_NAME --global; then
            gcloud compute ssl-certificates create $CERT_NAME \
              --domains="${{ vars.DOMAIN }}" \
              --global
          fi

          echo "ssl_certificate=$CERT_NAME" >> $GITHUB_OUTPUT

      - name: Create HTTP Proxy
        id: create-http-proxy
        run: |
          # HTTP Proxy
          if [[ $(gcloud compute target-http-proxies describe ${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-http --global) ]]; then
            echo "HTTP proxy exists"
          else
            gcloud compute target-http-proxies create ${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-http \
              --url-map="${{ steps.create-url-map.outputs.url_map }}" \
              --global
          fi

          # HTTPS Proxy
          if [[ $(gcloud compute target-https-proxies describe ${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-https --global) ]]; then
            echo "HTTPS proxy exists"
          else
            gcloud compute target-https-proxies create ${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-https \
              --url-map="${{ steps.create-url-map.outputs.url_map }}" \
              --ssl-certificates="${{ steps.create-ssl-certificates.outputs.ssl_certificate }}" \
              --global
          fi

          echo "http_proxy=${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-http" >> $GITHUB_OUTPUT
          echo "https_proxy=${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-https" >> $GITHUB_OUTPUT

      - name: Add Forwarding Rules
        id: add-forwarding
        run: |
          # HTTP Forwarding Rule
          if [[ $(gcloud compute forwarding-rules describe ${{ steps.create-http-proxy.outputs.http_proxy }}-forwarding-rule --global) ]]; then
            echo "HTTP Forwarding rule exists"
          else
            gcloud compute forwarding-rules create ${{ steps.create-http-proxy.outputs.http_proxy }}-forwarding-rule \
              --global \
              --target-http-proxy="${{ steps.create-http-proxy.outputs.http_proxy }}" \
              --ports=80
          fi

          # HTTPS Forwarding Rule
          if [[ $(gcloud compute forwarding-rules describe ${{ steps.create-http-proxy.outputs.https_proxy }}-forwarding-rule --global) ]]; then
            echo "HTTPS Forwarding rule exists"
          else
            gcloud compute forwarding-rules create ${{ steps.create-http-proxy.outputs.https_proxy }}-forwarding-rule \
              --global \
              --target-https-proxy="${{ steps.create-http-proxy.outputs.https_proxy }}" \
              --ports=443
          fi

          echo "http_forwarding_rules=${{ steps.create-http-proxy.outputs.http_proxy }}-forwarding-rule" >> $GITHUB_OUTPUT
          echo "https_forwarding_rules=${{ steps.create-http-proxy.outputs.https_proxy }}-forwarding-rule" >> $GITHUB_OUTPUT

      - name: Web Domain Mapping
        id: web-domain-mapping
        run: |
          if [[ $(gcloud beta run domain-mappings describe --domain "${{ vars.DOMAIN }}" --region "${{ inputs.google_cloud_region }}") ]]; then
            echo "Domain mapping exists"
          else
             gcloud beta run domain-mappings create \
                 --service "${{ inputs.app_name }}-web-${{ inputs.google_cloud_service_env }}" \
                 --domain "${{ vars.DOMAIN }}" \
                 --region "${{ inputs.google_cloud_region }}"
          fi
