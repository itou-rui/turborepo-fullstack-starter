name: "Setup Google Cloud Load Balancer"

on:
  workflow_call:
    inputs:
      app_name:
        type: string
        required: true
      google_cloud_region:
        type: string
        required: true
      google_cloud_service_env:
        type: string
        required: true

jobs:
  set-variables:
    runs-on: ubuntu-latest
    name: Setup variables
    timeout-minutes: 10
    outputs:
      sub_domain: ${{ steps.set-vars.outputs.sub_domain }}
      host_name: ${{ steps.set-vars.outputs.host_name }}
      branch_host_name: ${{ steps.set-vars.outputs.branch_host_name }}
      web_cloudrun_service_name: ${{ steps.set-vars.outputs.web_cloudrun_service_name }}
      api_cloudrun_service_name: ${{ steps.set-vars.outputs.api_cloudrun_service_name }}
      web_backend_service_name: ${{ steps.set-vars.outputs.web_backend_service_name }}
      api_backend_service_name: ${{ steps.set-vars.outputs.api_backend_service_name }}
      web_neg_name: ${{ steps.set-vars.outputs.web_neg_name }}
      api_neg_name: ${{ steps.set-vars.outputs.api_neg_name }}
      url_map_name: ${{ steps.set-vars.outputs.url_map_name }}
      path_matcher_name: ${{ steps.set-vars.outputs.path_matcher_name }}
      cert_name: ${{ steps.set-vars.outputs.cert_name }}
      dns_auth_name: ${{ steps.set-vars.outputs.dns_auth_name }}
      http_proxy_name: ${{ steps.set-vars.outputs.http_proxy_name }}
      https_proxy_name: ${{ steps.set-vars.outputs.https_proxy_name }}
      static_ip_name: ${{ steps.set-vars.outputs.static_ip_name }}
      http_forwarding_rule_name: ${{ steps.set-vars.outputs.http_forwarding_rule_name }}
      https_forwarding_rule_name: ${{ steps.set-vars.outputs.https_forwarding_rule_name }}

    steps:
      - name: Set variables
        id: set-vars
        run: |
          echo "sub_domain=${{ inputs.google_cloud_service_env }}.${{ inputs.app_name }}" >> $GITHUB_OUTPUT
          echo "host_name=${{ inputs.app_name }}.${{ vars.DOMAIN }}" >> $GITHUB_OUTPUT
          echo "branch_host_name=${{ inputs.google_cloud_service_env }}.${{ inputs.app_name }}" >> $GITHUB_OUTPUT

          echo "web_cloudrun_service_name=${{ inputs.app_name }}-web-${{ inputs.google_cloud_service_env }}" >> $GITHUB_OUTPUT
          echo "api_cloudrun_service_name=${{ inputs.app_name }}-api-${{ inputs.google_cloud_service_env }}" >> $GITHUB_OUTPUT

          echo "web_backend_service_name=${{ inputs.app_name }}-web-${{ inputs.google_cloud_service_env }}-backend" >> $GITHUB_OUTPUT
          echo "api_backend_service_name=${{ inputs.app_name }}-api-${{ inputs.google_cloud_service_env }}-backend" >> $GITHUB_OUTPUT

          echo "web_neg_name=${{ inputs.app_name }}-web-${{ inputs.google_cloud_service_env }}-neg" >> $GITHUB_OUTPUT
          echo "api_neg_name=${{ inputs.app_name }}-api-${{ inputs.google_cloud_service_env }}-neg" >> $GITHUB_OUTPUT

          echo "url_map_name=${{ inputs.app_name }}-load-balancer" >> $GITHUB_OUTPUT
          echo "path_matcher_name=${{ inputs.app_name }}-path-matcher" >> $GITHUB_OUTPUT
          echo "cert_name=${{ inputs.app_name }}-cert" >> $GITHUB_OUTPUT
          echo "dns_auth_name=${{ inputs.app_name }}-cert-auth" >> $GITHUB_OUTPUT
          echo "http_proxy_name=${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-http" >> $GITHUB_OUTPUT
          echo "https_proxy_name=${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-https" >> $GITHUB_OUTPUT
          echo "static_ip_name=${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-ip" >> $GITHUB_OUTPUT
          echo "http_forwarding_rule_name=${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-http-forwarding-rule" >> $GITHUB_OUTPUT
          echo "https_forwarding_rule_name=${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-https-forwarding-rule" >> $GITHUB_OUTPUT

  check-condition:
    runs-on: ubuntu-latest
    name: Check Services
    needs: [set-variables]
    outputs:
      web_backend_exists: ${{ steps.check-create-backend-services.outputs.web_backend_exists }}
      api_backend_exists: ${{ steps.check-create-backend-services.outputs.api_backend_exists }}
      web_neg_exists: ${{ steps.check-create-neg.outputs.web_neg_exists }}
      api_neg_exists: ${{ steps.check-create-neg.outputs.api_neg_exists }}
      web_neg_in_backend: ${{ steps.check-add-neg-backend.outputs.web_neg_in_backend }}
      api_neg_in_backend: ${{ steps.check-add-neg-backend.outputs.api_neg_in_backend }}
      url_map_exists: ${{ steps.check-create-url-map.outputs.url_map_exists }}
      api_path_rule_exists: ${{ steps.check-path-rule.outputs.api_path_rule_exists }}
      host_rule_exists: ${{ steps.check-add-host-rule.outputs.host_rule_exists }}
      path_matcher_exists: ${{ steps.check-add-host-rule.outputs.path_matcher_exists }}
      api_path_rewrite_exists: ${{ steps.check-path-rewrite.outputs.api_path_rewrite_exists }}
      branch_path_rewrite_exists: ${{ steps.check-path-rewrite.outputs.branch_path_rewrite_exists }}
      cert_exists: ${{ steps.check-ssl-certificates.outputs.cert_exists }}
      http_proxy_exists: ${{ steps.check-proxies.outputs.http_proxy_exists }}
      https_proxy_exists: ${{ steps.check-proxies.outputs.https_proxy_exists }}
      ip_address: ${{ steps.check-static-ip-address.outputs.ip_address }}
      ip_address_exists: ${{ steps.check-static-ip-address.outputs.ip_address_exists }}
      http_forwarding_rule_exists: ${{ steps.check-add-forwarding-rules.outputs.http_forwarding_rule_exists }}
      https_forwarding_rule_exists: ${{ steps.check-add-forwarding-rules.outputs.https_forwarding_rule_exists }}
      dns_record_exists: ${{ steps.check-add-dns-a-record.outputs.dns_record_exists }}
      existing_ip: ${{ steps.check-add-dns-a-record.outputs.existing_ip }}
      ip_matches: ${{ steps.check-add-dns-a-record.outputs.ip_matches }}
      dns_auth_exists: ${{ steps.check-create-dns-auth.outputs.dns_auth_exists }}
      dns_cname_record_exists: ${{ steps.check-dns-cname-record.outputs.dns_cname_record_exists }}
      cname_value_matches: ${{ steps.check-dns-cname-record.outputs.cname_value_matches }}
      cname_value: ${{ steps.check-dns-cname-record.outputs.cname_value }}
      cname_name: ${{ steps.check-dns-cname-record.outputs.cname_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Auth GoogleCloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GOOGLE_CLOUD_IDENTITY_POOL_ID }}/providers/${{ secrets.GOOGLE_CLOUD_IDENTITY_PROVIDER_ID }}"
          service_account: "${{ inputs.app_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
          project_id: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      - name: Check Create Backend Service
        id: check-create-backend-services
        run: |
          if gcloud compute backend-services describe ${{ needs.set-variables.outputs.web_backend_service_name }} --global 2> /dev/null; then
            echo "web_backend_exists=true" >> $GITHUB_OUTPUT
            echo "web_backend_exists: true"
          else
            echo "web_backend_exists=false" >> $GITHUB_OUTPUT
            echo "web_backend_exists: false"
          fi

          if gcloud compute backend-services describe ${{ needs.set-variables.outputs.api_backend_service_name }} --global 2> /dev/null; then
            echo "api_backend_exists=true" >> $GITHUB_OUTPUT
            echo "api_backend_exists: true"
          else
            echo "api_backend_exists=false" >> $GITHUB_OUTPUT
            echo "api_backend_exists: false"
          fi

      - name: Check Create NEG
        id: check-create-neg
        run: |
          if gcloud compute network-endpoint-groups describe ${{ needs.set-variables.outputs.web_neg_name }} --region="${{ inputs.google_cloud_region }}" 2> /dev/null; then
            echo "web_neg_exists=true" >> $GITHUB_OUTPUT
            echo "web_neg_exists: true"
          else
            echo "web_neg_exists=false" >> $GITHUB_OUTPUT
            echo "web_neg_exists: false"
          fi

          if gcloud compute network-endpoint-groups describe ${{ needs.set-variables.outputs.api_neg_name }} --region="${{ inputs.google_cloud_region }}" 2> /dev/null; then
            echo "api_neg_exists=true" >> $GITHUB_OUTPUT
            echo "api_neg_exists: true"
          else
            echo "api_neg_exists=false" >> $GITHUB_OUTPUT
            echo "api_neg_exists: false"
          fi

      - name: Check Add NEG to backend
        id: check-add-neg-backend
        run: |
          if gcloud compute backend-services describe ${{ needs.set-variables.outputs.web_backend_service_name }} \
              --global --format="json" | jq -e '.backends[] | select(.group | contains("'${{ needs.set-variables.outputs.web_neg_name }}'"))' 2> /dev/null; then
            echo "web_neg_in_backend=true" >> $GITHUB_OUTPUT
            echo "web_neg_in_backend: true"
          else
            echo "web_neg_in_backend=false" >> $GITHUB_OUTPUT
            echo "web_neg_in_backend: false"
          fi

          if gcloud compute backend-services describe ${{ needs.set-variables.outputs.api_backend_service_name }} \
              --global --format="json" | jq -e '.backends[] | select(.group | contains("'${{ needs.set-variables.outputs.api_neg_name }}'"))' 2> /dev/null; then
            echo "api_neg_in_backend=true" >> $GITHUB_OUTPUT
            echo "api_neg_in_backend: true"
          else
            echo "api_neg_in_backend=false" >> $GITHUB_OUTPUT
            echo "api_neg_in_backend: false"
          fi

      - name: Check Create URL Map
        id: check-create-url-map
        run: |
          if gcloud compute url-maps describe ${{ needs.set-variables.outputs.url_map_name }} --global; then
            echo "url_map_exists=true" >> $GITHUB_OUTPUT
            echo "url_map_exists: true"
          else
            echo "url_map_exists=false" >> $GITHUB_OUTPUT
            echo "url_map_exists: false"
          fi

      - name: Check Add Path Rule
        id: check-path-rule
        run: |
          if gcloud compute url-maps describe ${{ needs.set-variables.outputs.url_map_name }} \
              --global --format="json" | jq -e '.pathMatchers[].pathRules[] | select(.paths[] | contains("/api/*"))' 2> /dev/null; then
            echo "api_path_rule_exists=true" >> $GITHUB_OUTPUT
            echo "api_path_rule_exists: true"
          else
            echo "api_path_rule_exists=false" >> $GITHUB_OUTPUT
            echo "api_path_rule_exists: false"
          fi

      - name: Check Add Host Rule
        id: check-add-host-rule
        run: |
          if gcloud compute url-maps describe ${{ needs.set-variables.outputs.url_map_name }} \
               --global --format="json" | jq -e '.hostRules[] | select(.hosts[] | contains("'${{ needs.set-variables.outputs.host_name }}'"))' 2> /dev/null; then
              echo "host_rule_exists=true" >> $GITHUB_OUTPUT
              echo "host_rule_exists: true"

              if gcloud compute url-maps describe ${{ needs.set-variables.outputs.url_map_name }} \
                   --global --format="json" | jq -e '.pathMatchers[] | select(.name == "'${{ needs.set-variables.outputs.path_matcher_name }}'")' 2> /dev/null; then
                 echo "path_matcher_exists=true" >> $GITHUB_OUTPUT
                 echo "path_matcher_exists: true"
              else
                 echo "path_matcher_exists=false" >> $GITHUB_OUTPUT
                 echo "path_matcher_exists: false"
              fi

          else
            echo "host_rule_exists=false" >> $GITHUB_OUTPUT
            echo "host_rule_exists: false"
            echo "path_matcher_exists=false" >> $GITHUB_OUTPUT
            echo "path_matcher_exists: false"
          fi

      - name: Check URL Map Path Prefix Rewrite
        id: check-path-rewrite
        run: |
          if gcloud compute url-maps describe ${{ needs.set-variables.outputs.url_map_name }} \
              --global --format="json" | jq -e '.pathMatchers[].pathRules[] | select(.paths[] | contains("/api/*")) | .routeAction.urlRewrite.pathPrefixRewrite == "/"' 2> /dev/null; then
            echo "api_path_rewrite_exists=true" >> $GITHUB_OUTPUT
            echo "api_path_rewrite_exists: true"
          else
            echo "api_path_rewrite_exists=false" >> $GITHUB_OUTPUT
            echo "api_path_rewrite_exists: false"
          fi

          if gcloud compute url-maps describe ${{ needs.set-variables.outputs.url_map_name }} \
              --global --format="json" | jq -e '.pathMatchers[] | select(.name == "'${{ needs.set-variables.outputs.branch_host_name }}'") | .pathRules[0].routeAction.urlRewrite.pathPrefixRewrite == "/"' 2> /dev/null; then
            echo "branch_path_rewrite_exists=true" >> $GITHUB_OUTPUT
            echo "branch_path_rewrite_exists: true"
          else
            echo "branch_path_rewrite_exists=false" >> $GITHUB_OUTPUT
            echo "branch_path_rewrite_exists: false"
          fi

      - name: Check SSL Certificates
        id: check-ssl-certificates
        run: |
          if gcloud compute ssl-certificates describe ${{ needs.set-variables.outputs.cert_name }} --global 2> /dev/null; then
            echo "cert_exists=true" >> $GITHUB_OUTPUT
            echo "cert_exists: true"
          else
            echo "cert_exists=false" >> $GITHUB_OUTPUT
            echo "cert_exists: false"
          fi

      - name: Check Proxies
        id: check-proxies
        run: |
          if [[ $(gcloud compute target-http-proxies describe ${{ needs.set-variables.outputs.http_proxy_name }} --global) ]] 2> /dev/null; then
            echo "http_proxy_exists=true" >> $GITHUB_OUTPUT
            echo "http_proxy_exists: true"
          else
            echo "http_proxy_exist=false" >> $GITHUB_OUTPUT
            echo "http_proxy_exist: false"
          fi

          if [[ $(gcloud compute target-https-proxies describe ${{ needs.set-variables.outputs.https_proxy_name }} --global) ]] 2> /dev/null; then
            echo "https_proxy_exists=true" >> $GITHUB_OUTPUT
            echo "https_proxy_exists: true"
          else
            echo "https_proxy_exist=false" >> $GITHUB_OUTPUT
            echo "https_proxy_exist: false"
          fi

      - name: Check Static IP Address
        id: check-static-ip-address
        run: |
          if gcloud compute addresses describe ${{ needs.set-variables.outputs.static_ip_name }} --global 2> /dev/null; then
            echo "ip_address=$(gcloud compute addresses describe ${{ needs.set-variables.outputs.static_ip_name }} --global --format='get(address)')" >> $GITHUB_OUTPUT
            echo "ip_address_exists=true" >> $GITHUB_OUTPUT
            echo "ip_address_exists: true"
          else
            echo "ip_address_exists=false" >> $GITHUB_OUTPUT
            echo "ip_address=" >> $GITHUB_OUTPUT
            echo "ip_address_exists: false"
          fi

      - name: Check Add Forwarding Rules
        id: check-add-forwarding-rules
        run: |
          if [[ $(gcloud compute forwarding-rules describe ${{ needs.set-variables.outputs.http_forwarding_rule_name }} --global) ]]; then
            echo "http_forwarding_rule_exists=true" >> $GITHUB_OUTPUT
            echo "http_forwarding_rule_exists: true"
          else
            echo "http_forwarding_rule_exists=false" >> $GITHUB_OUTPUT
            echo "http_forwarding_rule_exists: false"
          fi

          if [[ $(gcloud compute forwarding-rules describe ${{ needs.set-variables.outputs.https_forwarding_rule_name }} --global) ]]; then
            echo "https_forwarding_rule_exists=true" >> $GITHUB_OUTPUT
            echo "https_forwarding_rule_exists: true"
          else
            echo "https_forwarding_rule_exists=false" >> $GITHUB_OUTPUT
            echo "https_forwarding_rule_exists: false"
          fi

      - name: Check DNS Authorizations
        id: check-create-dns-auth
        run: |
          if gcloud certificate-manager dns-authorizations describe "${{ needs.set-variables.outputs.dns_auth_name }}" --format=json 2>/dev/null; then
            echo "dns_auth_exists=true" >> $GITHUB_OUTPUT
            echo "dns_auth_exists: true"
          else
            echo "dns_auth_exists=false" >> $GITHUB_OUTPUT
            echo "dns_auth_exists: false"
          fi

      - name: Check DNS CNAME Record
        id: check-dns-cname-record
        run: |
          ZONE_NAME="${{ vars.DOMAIN }}"
          ZONE_NAME=${ZONE_NAME//./-}

          if [ "${{ steps.check-create-dns-auth.outputs.dns_auth_exists }}" == "true" ]; then
            DNS_AUTH_INFO=$(gcloud certificate-manager dns-authorizations describe "${{ needs.set-variables.outputs.dns_auth_name }}" --format=json)
            CNAME_NAME=$(echo $DNS_AUTH_INFO | jq -r '.dnsResourceRecord.name')
            EXPECTED_VALUE=$(echo $DNS_AUTH_INFO | jq -r '.dnsResourceRecord.data')

            echo "cname_name=$CNAME_NAME" >> $GITHUB_OUTPUT
            echo "cname_value=$EXPECTED_VALUE" >> $GITHUB_OUTPUT
            echo "cname_name: $CNAME_NAME"
            echo "cname_value: $EXPECTED_VALUE"

            EXISTING_RECORD=$(gcloud dns record-sets list \
              --zone=$ZONE_NAME \
              --name="$CNAME_NAME" \
              --type=CNAME \
              --format="get(name,rrdatas[0])" 2>/dev/null || true)

            if [ ! -z "$EXISTING_RECORD" ]; then
              echo "dns_cname_record_exists=true" >> $GITHUB_OUTPUT
              echo "dns_cname_record_exists: true"

              EXISTING_VALUE=$(echo "$EXISTING_RECORD" | awk '{print $2}')
              echo "cname_value=$EXISTING_VALUE" >> $GITHUB_OUTPUT
              echo "cname_value: $EXISTING_VALUE"

              if [ "$EXISTING_VALUE" == "$EXPECTED_VALUE" ]; then
                echo "cname_value_matches=true" >> $GITHUB_OUTPUT
                echo "cname_value_matches: true"
              else
                echo "cname_value_matches=false" >> $GITHUB_OUTPUT
                echo "cname_value_matches: false"
              fi
            else
              echo "dns_cname_record_exists=false" >> $GITHUB_OUTPUT
              echo "dns_cname_record_exists: false"
              echo "cname_value=" >> $GITHUB_OUTPUT
              echo "cname_value_matches=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "dns_cname_record_exists=false" >> $GITHUB_OUTPUT
            echo "dns_cname_record_exists: false"
            echo "cname_value=" >> $GITHUB_OUTPUT
            echo "cname_value_matches=false" >> $GITHUB_OUTPUT
            echo "cname_name=" >> $GITHUB_OUTPUT
          fi

      - name: Check Add DNS A Record
        id: check-add-dns-a-record
        run: |
          ZONE_NAME=${ZONE_NAME//./-}
          BRANCH_HOST="${{ needs.set-variables.outputs.branch_host_name }}"
          FULL_DOMAIN="$BRANCH_HOST.${{ vars.DOMAIN }}"
          EXPECTED_IP="${{ steps.check-static-ip-address.outputs.ip_address }}"

          echo "Checking DNS record for $FULL_DOMAIN"

          EXISTING_RECORD=$(gcloud dns record-sets list \
            --zone=$ZONE_NAME \
            --name="$FULL_DOMAIN" \
            --type=A \
            --format="get(name,rrdatas[0])" 2>/dev/null || true)

          if [ ! -z "$EXISTING_RECORD" ]; then
            echo "dns_record_exists=true" >> $GITHUB_OUTPUT
            echo "dns_record_exists: true"

            EXISTING_IP=$(echo "$EXISTING_RECORD" | awk '{print $2}')
            echo "existing_ip=$EXISTING_IP" >> $GITHUB_OUTPUT
            echo "existing_ip: $EXISTING_IP"

            if [ "$EXISTING_IP" == "$EXPECTED_IP" ]; then
              echo "ip_matches=true" >> $GITHUB_OUTPUT
              echo "ip_matches: true"
            else
              echo "ip_matches=false" >> $GITHUB_OUTPUT
              echo "ip_matches: false"
            fi
          else
            echo "dns_record_exists=false" >> $GITHUB_OUTPUT
            echo "dns_record_exists: false"
            echo "existing_ip=" >> $GITHUB_OUTPUT
            echo "existing_ip: "
            echo "ip_matches=false" >> $GITHUB_OUTPUT
            echo "ip_matches: false"
          fi

  web:
    runs-on: ubuntu-latest
    name: Setup Web
    needs: [set-variables, check-condition]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Auth GoogleCloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GOOGLE_CLOUD_IDENTITY_POOL_ID }}/providers/${{ secrets.GOOGLE_CLOUD_IDENTITY_PROVIDER_ID }}"
          service_account: "${{ inputs.app_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
          project_id: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      - name: Create Backend Service
        if: needs.check-condition.outputs.web_backend_exists == 'false'
        run: |
          gcloud compute backend-services create ${{ needs.set-variables.outputs.web_backend_service_name }} \
             --global \
             --protocol=HTTP2 \
             --port-name=http \
             --timeout=30s \
             --connection-draining-timeout=30s \
             --enable-cdn \
             --load-balancing-scheme=EXTERNAL_MANAGED

      - name: Create NEG Backend
        if: needs.check-condition.outputs.web_neg_exists == 'false'
        run: |
          gcloud compute network-endpoint-groups create ${{ needs.set-variables.outputs.web_neg_name }} \
            --network-endpoint-type=serverless \
            --cloud-run-service="${{ needs.set-variables.outputs.web_cloudrun_service_name }}" \
            --region="${{ inputs.google_cloud_region }}"

      - name: Add NEG to backend service
        if: needs.check-condition.outputs.web_neg_in_backend == 'false'
        run: |
          gcloud compute backend-services add-backend ${{ steps.create-web-backend-service.outputs.web_backend_service }} \
            --global \
            --network-endpoint-group="${{ needs.set-variables.outputs.web_neg_name }}" \
            --network-endpoint-group-region="${{ inputs.google_cloud_region }}"

  api:
    runs-on: ubuntu-latest
    name: Setup Api
    needs: [set-variables, check-condition]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Auth GoogleCloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GOOGLE_CLOUD_IDENTITY_POOL_ID }}/providers/${{ secrets.GOOGLE_CLOUD_IDENTITY_PROVIDER_ID }}"
          service_account: "${{ inputs.app_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
          project_id: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      - name: Create Backend Service
        if: needs.check-condition.outputs.api_backend_exists == 'false'
        run: |
          gcloud compute backend-services create ${{ needs.set-variables.outputs.api_backend_service_name }} \
             --global \
             --protocol=HTTP2 \
             --port-name=http \
             --timeout=30s \
             --connection-draining-timeout=30s \
             --enable-cdn \
             --load-balancing-scheme=EXTERNAL_MANAGED

      - name: Create NEG Backend
        if: needs.check-condition.outputs.api_neg_exists == 'false'
        run: |
          gcloud compute network-endpoint-groups create ${{ needs.set-variables.outputs.api_neg_name }} \
            --network-endpoint-type=serverless \
            --cloud-run-service="${{ needs.set-variables.outputs.api_cloudrun_service_name }}" \
            --region="${{ inputs.google_cloud_region }}"

      - name: Add NEG to backend service
        if: needs.check-condition.outputs.api_neg_in_backend == 'false'
        run: |
          gcloud compute backend-services add-backend ${{ steps.create-api-backend-service.outputs.api_backend_service }} \
            --global \
            --network-endpoint-group="${{ needs.set-variables.outputs.api_neg_name }}" \
            --network-endpoint-group-region="${{ inputs.google_cloud_region }}"

  integration:
    runs-on: ubuntu-latest
    name: Integration Backend services
    needs: [set-variables, check-condition, web, api]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Auth GoogleCloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GOOGLE_CLOUD_IDENTITY_POOL_ID }}/providers/${{ secrets.GOOGLE_CLOUD_IDENTITY_PROVIDER_ID }}"
          service_account: "${{ inputs.app_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
          project_id: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      - name: Create URL Map
        if: needs.check-condition.outputs.url_map_exists == 'false'
        run: |
          gcloud compute url-maps create ${{ needs.set-variables.outputs.url_map_name }} \
            --default-service="${{ needs.set-variables.outputs.web_backend_service_name }}" \
            --global

      - name: Add Path Rule
        if: needs.check-condition.outputs.api_path_rule_exists == 'false'
        run: |
          gcloud compute url-maps add-path-matcher ${{ needs.set-variables.outputs.url_map_name }} \
            --path-matcher-name="${{ needs.set-variables.outputs.path_matcher_name }}" \
            --default-service="${{ needs.set-variables.outputs.web_backend_service_name }}" \
            --path-rules="/api/*=${{ needs.set-variables.outputs.api_backend_service_name }}" \
            --global

      - name: Add Host Rule
        if: needs.check-condition.outputs.host_rule_exists == 'false' &&
          needs.check-condition.outputs.path_matcher_exists == 'false'
        run: |
          gcloud compute url-maps add-host-rule ${{ needs.set-variables.outputs.url_map_name }} \
            --hosts="${{ needs.set-variables.outputs.branch_host_name }}.${{ vars.DOMAIN }}" \
            --path-matcher-name="${{ needs.set-variables.outputs.path_matcher_name }}" \
            --global

      - name: Install yq for YAML processing
        if: needs.check-condition.outputs.api_path_rewrite_exists == 'false' &&
          needs.check-condition.outputs.branch_path_rewrite_exists == 'false'
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.1/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Configure URL Map with Path Rewrite
        if: needs.check-condition.outputs.api_path_rewrite_exists == 'false' &&
          needs.check-condition.outputs.branch_path_rewrite_exists == 'false'
        run: |
          gcloud compute url-maps export ${{ needs.set-variables.outputs.url_map_name }} \
            --destination url_map_config.yaml \
            --global

          yq eval '.pathMatchers[0].pathRules[0].routeAction.urlRewrite.pathPrefixRewrite = "/"' -i url_map_config.yaml

          gcloud compute url-maps import ${{ needs.set-variables.outputs.url_map_name }} \
            --source url_map_config.yaml \
            --global

          rm url_map_config.yaml

      - name: Reserve Static IP Address
        id: reserve-ip
        run: |
          if [ "${{ needs.check-condition.outputs.ip_address_exists }}" == "true" ]; then
              echo "ip_address=${{ needs.check-condition.outputs.ip_address }}" >> $GITHUB_OUTPUT
          else
            gcloud compute addresses create ${{ needs.set-variables.outputs.static_ip_name }} \
              --global \
              --network-tier=PREMIUM

            for i in {1..30}; do
              IP_ADDRESS=$(gcloud compute addresses describe ${{ needs.set-variables.outputs.static_ip_name }} \
                --global \
                --format='get(address)' 2>/dev/null)

              if [ ! -z "$IP_ADDRESS" ]; then
                echo "ip_address=$IP_ADDRESS" >> $GITHUB_OUTPUT
                echo "Reserved IP address: $IP_ADDRESS"
                exit 0
              fi

              echo "Waiting for IP address to be available... (Attempt $i/30)"
              sleep 10
            done

            echo "Failed to get IP address after 5 minutes"
            exit 1
          fi

      - name: Create DNS Authorizations
        if: needs.check-condition.outputs.dns_auth_exists == 'false'
        run: |
          gcloud certificate-manager dns-authorizations create "${{ needs.set-variables.outputs.dns_auth_name }}" --domain="${{ needs.set-variables.outputs.host_name }}"

      - name: Get DNS Authorization Record
        id: get-dns-auth-record
        run: |
          if [ "${{ needs.check-condition.outputs.dns_cname_record_exists }}" == 'true' ]; then 
            echo "cname_name=${{ needs.check-condition.outputs.cname_name }}" >> $GITHUB_OUTPUT
            echo "cname_value=${{ needs.check-condition.outputs.cname_value }}" >> $GITHUB_OUTPUT
          else
            DNS_AUTH_INFO=$(gcloud certificate-manager dns-authorizations describe "${{ needs.set-variables.outputs.dns_auth_name }}" --format=json)
            echo "cname_name=$(echo $DNS_AUTH_INFO | jq -r '.dnsResourceRecord.name')" >> $GITHUB_OUTPUT
            echo "cname_value=$(echo $DNS_AUTH_INFO | jq -r '.dnsResourceRecord.data')" >> $GITHUB_OUTPUT
          fi

      - name: Add DNS Record
        if: needs.check-condition.outputs.dns_cname_record_exists == 'false'
        run: |
          ZONE_NAME="${{ vars.DOMAIN }}"
          ZONE_NAME=${ZONE_NAME//./-}

          gcloud dns record-sets transaction start --zone="$ZONE_NAME"
          gcloud dns record-sets transaction add "${{ steps.get-dns-auth-record.outputs.cname_value }}" \
            --name="${{ steps.get-dns-auth-record.outputs.cname_name }}" \
            --ttl="300" \
            --type="CNAME" \
            --zone="$ZONE_NAME"
          gcloud dns record-sets transaction execute --zone="$ZONE_NAME"

      - name: Create SSL Certificates
        if: needs.check-condition.outputs.cert_exists == 'false'
        run: |
          gcloud certificate-manager certificates create ${{ needs.set-variables.outputs.cert_name }} \
            --domains="*.${{ needs.set-variables.outputs.host_name }}" \
            --dns-authorizations="${{ needs.set-variables.outputs.dns_auth_name }}" \
            --description="Wildcard certificate for ${{ needs.set-variables.outputs.host_name }}"

      - name: Create Http Proxy
        if: needs.check-condition.outputs.http_proxy_exists == 'false'
        run: |
          gcloud compute target-http-proxies create ${{ needs.set-variables.outputs.http_proxy_name }} \
            --url-map="${{ needs.set-variables.outputs.url_map_name }}" \
            --global

      - name: Create Https Proxy
        if: needs.check-condition.outputs.https_proxy_exists == 'false'
        run: |
          gcloud compute target-https-proxies create ${{ needs.set-variables.outputs.https_proxy_name }} \
            --url-map="${{ needs.set-variables.outputs.url_map_name }}" \
            --ssl-certificates="${{ needs.set-variables.outputs.cert_name }}" \
            --global

      - name: Add Http Forwarding Rules
        run: |
          gcloud compute forwarding-rules create ${{ needs.set-variables.outputs.http_forwarding_rule_name }} \
            --global \
            --target-http-proxy="${{ needs.set-variables.outputs.http_proxy_name }}" \
            --ports=80

      - name: Add Https Forwarding Rules
        run: |
          gcloud compute forwarding-rules create ${{ needs.set-variables.outputs.https_forwarding_rule_name }} \
            --global \
            --load-balancing-scheme=EXTERNAL_MANAGED \
            --network-tier=PREMIUM \
            --address="${{ needs.set-variables.outputs.static_ip_name }}" \
            --target-http-proxy="${{ needs.set-variables.outputs.https_proxy_name }}" \
            --ports=443

      - name: Add DNS A Record
        if: |
          needs.check-condition.outputs.dns_record_exists == 'false' || 
          (needs.check-condition.outputs.dns_record_exists == 'true' && needs.check-condition.outputs.ip_matches == 'false')
        run: |
          ZONE_NAME="${{ vars.DOMAIN }}"
          ZONE_NAME=${ZONE_NAME//./-}

          # Set hostname and IP address
          BRANCH_HOST="${{ needs.set-variables.outputs.branch_host_name }}"
          FULL_DOMAIN="$BRANCH_HOST.${{ vars.DOMAIN }}"
          IP_ADDRESS="${{ steps.reserve-ip.outputs.ip_address }}"

          echo "Setting up DNS record for $FULL_DOMAIN with IP: $IP_ADDRESS"

          # Pre-transaction cleanup
          gcloud dns record-sets transaction abort --zone=$ZONE_NAME 2>/dev/null || true
          rm -f transaction.yaml 2>/dev/null || true

          if [ "${{ needs.check-condition.outputs.dns_record_exists }}" == "true" ]; then
            EXISTING_IP="${{ needs.check-condition.outputs.existing_ip }}"
            echo "Updating existing DNS record from $EXISTING_IP to $IP_ADDRESS"

            # Update existing records
            gcloud dns record-sets transaction start --zone=$ZONE_NAME
            gcloud dns record-sets transaction remove --zone=$ZONE_NAME \
              --name="$FULL_DOMAIN." \
              --ttl=300 \
              --type=A "$EXISTING_IP"

            gcloud dns record-sets transaction add --zone=$ZONE_NAME \
              --name="$FULL_DOMAIN." \
              --ttl=300 \
              --type=A "$IP_ADDRESS"

          else

            # Add new record
            gcloud dns record-sets transaction start --zone=$ZONE_NAME
            gcloud dns record-sets transaction add --zone=$ZONE_NAME \
              --name="$FULL_DOMAIN." \
              --ttl=300 \
              --type=A "$IP_ADDRESS"
          fi

          # Execute transaction
          if ! gcloud dns record-sets transaction execute --zone=$ZONE_NAME; then
            echo "Failed to update DNS record"
            exit 1
          fi
