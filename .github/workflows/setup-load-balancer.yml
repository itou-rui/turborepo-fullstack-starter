name: "Setup Google Cloud Load Balancer"

on:
  workflow_call:
    inputs:
      app_name:
        type: string
        required: true
      domain:
        type: string
      google_cloud_region:
        type: string
        required: true
      google_cloud_service_env:
        type: string
        required: true

jobs:
  setup:
    runs-on: ubuntu-latest
    name: Setup LoadBalancer
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set Domain
        id: set-domain
        run: |
          if [ ! -z "${{ vars.DOMAIN }}" ]; then
            DOMAIN="${{ vars.DOMAIN }}"
          else
            DOMAIN="${{ inputs.app_name }}-web-${{ inputs.google_cloud_service_env }}-${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}.${{ inputs.google_cloud_region }}.run.app"
          fi
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT

      - name: Auth GoogleCloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GOOGLE_CLOUD_IDENTITY_POOL_ID }}/providers/${{ secrets.GOOGLE_CLOUD_IDENTITY_PROVIDER_ID }}"
          service_account: "${{ inputs.app_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
          project_id: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      - name: Create Backend Service
        id: create-backend-service
        run: |
          if gcloud compute backend-services describe ${{ inputs.app_name }}-api-${{ inputs.google_cloud_service_env }}-backend --global; then
            echo "Backend service exists"
          else
            gcloud compute backend-services create ${{ inputs.app_name }}-api-${{ inputs.google_cloud_service_env }}-backend \
              --global \
              --protocol=HTTP2 \
              --port-name=http \
              --timeout=30s \
              --connection-draining-timeout=30s \
              --enable-cdn
          fi
          echo "backend_service=${{ inputs.app_name }}-api-${{ inputs.google_cloud_service_env }}-backend" >> $GITHUB_OUTPUT

      - name: Create URL Map
        id: create-url-map
        run: |
          if gcloud compute url-maps describe ${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-load-balancer --global; then
            echo "URL Map exists"
          else
            gcloud compute url-maps create ${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-load-balancer \
              --default-service="${{ steps.create-backend-service.outputs.backend_service }}" \
              --global
          fi
          echo "url_map=${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-load-balancer" >> $GITHUB_OUTPUT

      - name: Add Path Rule
        id: add-path-rule
        run: |
          MAP_INFO=$(gcloud compute url-maps describe ${{ steps.create-url-map.outputs.url_map }} --global --format=json)
          if echo "$MAP_INFO" | grep -q "path-matcher"; then
            echo "Path matcher exists"
          else
            gcloud compute url-maps add-path-matcher ${{ steps.create-url-map.outputs.url_map }} \
                --path-matcher-name="path-matcher" \
                --default-service="${{ steps.create-backend-service.outputs.backend_service }}" \
                --path-rules="/api/*=${{ inputs.app_name }}-api-${{ inputs.google_cloud_service_env }}-backend"
          fi
          echo "path_matcher=${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}-load-balancer" >> $GITHUB_OUTPUT

      - name: Create SSL Certificates
        id: create-ssl-certificates
        run: |
          if [[ $(gcloud compute ssl-certificates list --format="value(name)" --filter="name~'^${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}'") ]]; then
            echo "SSL certificates exist"
          else
            gcloud compute ssl-certificates create "$certificates" --domains "${{ steps.set-domain.outputs.domain }}"
          fi
          echo "ssl_certificates=${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}" >> $GITHUB_ENV

      - name: Create HTTPS Proxy
        id: create-http-proxy
        run: |
          if gcloud compute target-https-proxies describe ${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }} --global; then
            echo "HTTPS proxy exists"
          else
              gcloud compute target-https-proxies create ${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }} --url-map="${{ steps.create-url-map.outputs.url_map }}" --ssl-certificates="${{ env.ssl_certificates }}"
          fi

          echo "http_proxy=${{ inputs.app_name }}-${{ inputs.google_cloud_service_env }}" >> $GITHUB_OUTPUT

      - name: Add Forwarding Rule
        id: add-forwarding
        run: |
          if gcloud compute forwarding-rules describe ${{ steps.create-http-proxy.outputs.http_proxy }}-https-forwarding-rule --global; then
            echo "Forwarding rule exists"
          else
            gcloud compute forwarding-rules create ${{ steps.create-http-proxy.outputs.http_proxy }}-https-forwarding-rule \
                --global \
                --target-https-proxy="${{ steps.create-http-proxy.outputs.http_proxy }}" \
                --ports=443
          fi
          echo "forwarding_rules=${{ steps.create-http-proxy.outputs.http_proxy }}-https-forwarding-rule" >> $GITHUB_OUTPUT

      - name: Domain Mapping
        id: domain-mapping
        run: |
          if gcloud beta run domain-mappings describe --domain "${{ steps.set-domain.outputs.domain }}" --region "${{ inputs.google_cloud_region }}"; then
            echo "Domain mapping exists"
          else
             gcloud beta run domain-mappings create \
                 --service "${{ inputs.app_name }}-web-${{ inputs.google_cloud_service_env }}" \
                 --domain "${{ steps.set-domain.outputs.domain }}" \
                 --region "${{ inputs.google_cloud_region }}"
          fi
