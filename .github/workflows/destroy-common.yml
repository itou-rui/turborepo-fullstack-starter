on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      app:
        required: true
        type: string
      app_name:
        required: true
        type: string
      app_version:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      ref_name:
        required: true
        type: string
      google_cloud_region:
        required: true
        type: string
      google_cloud_service_env:
        required: true
        type: string

jobs:
  cloudrun:
    name: Destroy CloudRun Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Auth GoogleCloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GOOGLE_CLOUD_IDENTITY_POOL_ID }}/providers/${{ secrets.GOOGLE_CLOUD_IDENTITY_PROVIDER_ID }}"
          service_account: "${{ inputs.app_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
          project_id: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      - name: Check CloudRun Service
        id: check
        run: |
          if gcloud run services describe ${{ inputs.app_name }}-${{ inputs.app }}-${{ inputs.google_cloud_service_env }} --region=${{ inputs.google_cloud_region }} --project=${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}; then
            echo "is_created=true" >> $GITHUB_OUTPUT
          else
            echo "is_created=false" >> $GITHUB_OUTPUT
          fi

      - name: Destroy Cloud Run service
        id: destroy
        if: steps.check.outputs.is_created == 'true'
        run: |
          gcloud run services delete ${{ inputs.app_name }}-${{ inputs.app }}-${{ inputs.google_cloud_service_env }} --region ${{ inputs.google_cloud_region }} --quiet

  artifact-repository:
    name: Delete Artifact Repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Generate Image
        id: generate_image
        run: |
          IMAGE_NAME="${{ inputs.google_cloud_region }}-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}/${{ inputs.repo_name }}/${{ inputs.app }}/${{ inputs.google_cloud_service_env }}"
          echo "docker_image=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Get Docker Images
        id: get-docker-images
        run: |
          DOCKER_IMAGES=$(gcloud artifacts docker images list ${{ steps.generate_image.outputs.docker_image }} --include-tags --format="get(metadata.name)" --project ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }})
          echo "docker_images=${DOCKER_IMAGES}" >> $GITHUB_OUTPUT

      - name: Remove Docker Images
        id: remove_docker_images
        if: steps.get-docker-images.outputs.docker_images != ''
        run: |
          # Loop through each image and delete it
          if [ -n "${{ steps.get-docker-images.outputs.docker_images }}" ]; then
            for image in ${{ steps.get-docker-images.outputs.docker_images }}; do
              hash=$(echo $image | cut -d'@' -f2)
              gcloud artifacts docker images delete "${{ steps.generate_image.outputs.docker_image }}@$hash" --delete-tags --project=${{ secrets.GOOGLE_CLOUD_PROJECT_ID }} --quiet
              echo "Remove: ${{ steps.generate_image.outputs.docker_image }}@$hash"
            done
          fi

      - name: Delete Artifacts Repository
        id: delete_artifact_resistories
        if: steps.get-docker-images.outputs.docker_images != ''
        run: |
          gcloud artifacts docker images delete "${{ steps.generate_image.outputs.docker_image }}" --delete-tags --project=${{ secrets.GOOGLE_CLOUD_PROJECT_ID }} --quiet
