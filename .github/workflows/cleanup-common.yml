name: "Cleanup Common"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      app:
        required: true
        type: string
      app_name:
        required: true
        type: string
      app_version:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      ref_name:
        required: true
        type: string
      execute_artifact_repository:
        required: true
        type: boolean
      execute_cloudrun_revision:
        required: true
        type: boolean
      execute_github_cache:
        required: true
        type: boolean

jobs:
  artifact-repository:
    name: Delete Artifact Repository
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: inputs.execute_artifact_repository == true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Auth GoogleCloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GOOGLE_CLOUD_IDENTITY_POOL_ID }}/providers/${{ secrets.GOOGLE_CLOUD_IDENTITY_PROVIDER_ID }}"
          service_account: "${{ inputs.app_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
          project_id: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      - name: Generate Image
        id: generate_image
        run: |
          if [ "${{ inputs.environment }}" == "prev" ]; then
            IMAGE_NAME="${{ vars.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}/${{ inputs.repo_name }}/${{ inputs.app }}/${{ inputs.ref_name }}"
          else
            IMAGE_NAME="${{ vars.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}/${{ inputs.repo_name }}/${{ inputs.app }}/${{ inputs.environment }}"
          fi
          echo "docker_image=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Docker Images
        run: |
          # Generate the correct image path format
          FORMATTED_PATH=$(echo "${{ steps.generate_image.outputs.docker_image }}" | \
            sed -E "s|projects/([^/]+)/locations/([^/]+)/repositories/([^/]+)/dockerImages/|${{ vars.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/\1/\3/|g" | \
            sed "s|%2F|/|g")

          echo "Formatted path: ${FORMATTED_PATH}"

          # List images in the Artifact Registry
          images=$(gcloud artifacts docker images list "${FORMATTED_PATH}" \
            --include-tags \
            --format="get(metadata.name)" \
            --project=${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}) || true

          # Loop through each image and delete it
          if [ -n "$images" ]; then
            for hash in $images; do
              echo "Deleting image: ${FORMATTED_PATH}@${hash}"
              gcloud artifacts docker images delete "${FORMATTED_PATH}@${hash}" \
                --delete-tags \
                --project=${{ secrets.GOOGLE_CLOUD_PROJECT_ID }} \
                --quiet || true
            done

            # Delete the parent image
            echo "Deleting parent image: ${FORMATTED_PATH}"
            gcloud artifacts docker images delete "${FORMATTED_PATH}" \
              --delete-tags \
              --project=${{ secrets.GOOGLE_CLOUD_PROJECT_ID }} \
              --quiet || true
          fi

  cloudrun:
    name: Delete Cloudrun Revision
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Auth GoogleCloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GOOGLE_CLOUD_IDENTITY_POOL_ID }}/providers/${{ secrets.GOOGLE_CLOUD_IDENTITY_PROVIDER_ID }}"
          service_account: "${{ inputs.app_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
          project_id: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      - name: Remove Revision Tag
        if: inputs.execute_cloudrun_revision == true
        run: |
          if [ "${{ inputs.environment }}" == "prev" ]; then
            tag_name="${{ inputs.ref_name }}"
          else
            tag_name="${{ inputs.environment }}"
          fi

          revisions_with_tag=$(gcloud run services describe ${{ inputs.app_name }}-${{ inputs.app }} \
            --region="${{ vars.GOOGLE_CLOUD_REGION }}" \
            --format='json' | jq -r '.spec.traffic[] | select(.tag=="'$tag_name'") | .revisionName')

          for revision in $revisions_with_tag; do
            echo "Removing tag $tag_name from revision $revision"
            gcloud run services update-traffic ${{ inputs.app_name }}-${{ inputs.app }} \
              --remove-tags=$tag_name \
              --region="${{ vars.GOOGLE_CLOUD_REGION }}"
          done

      - name: Delete Revisions with Removed Tag
        if: inputs.execute_cloudrun_revision == true
        run: |
          if [ "${{ inputs.environment }}" == "prev" ]; then
            tag_name="${{ inputs.ref_name }}"
          else
            tag_name="${{ inputs.environment }}"
          fi

          echo "Fetching revisions with tag $tag_name that have 0% traffic..."

          # Here, only those with percent of 0 from traffic information are targeted for deletion.
          revisions_to_delete=$(gcloud run services describe ${{ inputs.app_name }}-${{ inputs.app }} \
            --region="${{ vars.GOOGLE_CLOUD_REGION }}" \
            --format='json' | jq -r '.spec.traffic[] | select(.tag=="'$tag_name'" and .percent==0) | .revisionName')

          for revision in $revisions_to_delete; do
            echo "Deleting revision $revision with tag $tag_name"
            gcloud run revisions delete $revision \
              --region="${{ vars.GOOGLE_CLOUD_REGION }}" \
              --quiet || echo "Failed to delete revision $revision"
          done

  build-cache:
    name: Github Build Cache
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: inputs.execute_github_cache == true
    steps:
      - name: Delete GitHub Actions Cache
        uses: actions/github-script@v7
        with:
          script: |
            console.log(`About to clear cache for app: ${{ inputs.app }} and branch: ${{ inputs.ref_name }}`);
            let page = 1;
            let caches;
            do {
              caches = await github.rest.actions.getActionsCacheList({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
                page: page,
                key: `${{ inputs.app }}-${{ inputs.ref_name }}`
              });
              for (const cache of caches.data.actions_caches) {
                console.log(cache);
                await github.rest.actions.deleteActionsCacheById({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  cache_id: cache.id,
                });
              }
              page++;
            } while (caches.data.actions_caches.length === 100);
            console.log(`Cache clear completed for app: ${{ inputs.app }} and branch: ${{ inputs.ref_name }}`);
