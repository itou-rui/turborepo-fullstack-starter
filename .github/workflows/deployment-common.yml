name: "Deployment Common"

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      app:
        required: true
        type: string
      app_name:
        required: true
        type: string
      app_version:
        required: true
        type: string
      repo_name:
        required: true
        type: string
      ref_name:
        required: true
        type: string

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      docker_image: ${{ steps.generate_image.outputs.docker_image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Auth GoogleCloud
        id: auth-google-cloud
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GOOGLE_CLOUD_IDENTITY_POOL_ID }}/providers/${{ secrets.GOOGLE_CLOUD_IDENTITY_PROVIDER_ID }}"
          service_account: "${{ inputs.app_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
          project_id: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      - name: Create Artifacts Repository
        run: |
          if gcloud artifacts repositories describe "${{ inputs.repo_name }}" --location="${{ vars.GOOGLE_CLOUD_REGION }}" --project="${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"; then
            echo "Artifacts Repository exists"
          else
            gcloud artifacts repositories create ${{ inputs.repo_name }} \
              --repository-format="docker" \
              --location="${{ vars.GOOGLE_CLOUD_REGION }}" \
              --project="${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"
          fi

      - name: Auth Docker
        uses: docker/login-action@v1
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth-google-cloud.outputs.access_token }}"
          registry: "${{ vars.GOOGLE_CLOUD_REGION }}-docker.pkg.dev"

      - name: Generate Image
        id: generate_image
        run: |
          if [ "${{ inputs.environment }}" == "prev" ]; then
            IMAGE_NAME="${{ vars.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}/${{ inputs.repo_name }}/${{ inputs.app }}/${{ inputs.ref_name }}"
          else
            IMAGE_NAME="${{ vars.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}/${{ inputs.repo_name }}/${{ inputs.app }}/${{ inputs.environment }}"
          fi
          echo "docker_image=${IMAGE_NAME}" >> $GITHUB_OUTPUT

      - name: Set up buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ inputs.app }}/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.generate_image.outputs.docker_image }}:${{ inputs.app_version }}
            ${{ steps.generate_image.outputs.docker_image }}:${{ github.sha }}
            ${{ steps.generate_image.outputs.docker_image }}:latest
          cache-from: |
            type=gha,scope=${{ inputs.app }}-${{ inputs.ref_name }}
            type=registry,ref=${{ steps.generate_image.outputs.docker_image }}:cache
          cache-to: |
            type=gha,mode=max,scope=${{ inputs.app }}-${{ inputs.ref_name }}
            type=registry,ref=${{ steps.generate_image.outputs.docker_image }}:cache,mode=max

  deploy-cloudrun:
    name: CloudRun
    runs-on: ubuntu-latest
    needs: [build-and-push]
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup variables
        id: set-vars
        run: |
          if [ "${{ inputs.environment }}" == "prev" ]; then
            echo "docker_image_name=${{ vars.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}/${{ inputs.repo_name }}/${{ inputs.app }}/${{ inputs.ref_name }}" >> $GITHUB_OUTPUT
            echo "revision_tag=${{ inputs.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "docker_image_name=${{ vars.GOOGLE_CLOUD_REGION }}-docker.pkg.dev/${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}/${{ inputs.repo_name }}/${{ inputs.app }}/${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "revision_tag=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          fi
          echo "service_name=${{ inputs.app_name }}-${{ inputs.app }}" >> $GITHUB_OUTPUT

      - name: Auth GoogleCloud
        id: auth-google-cloud
        uses: google-github-actions/auth@v1
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GOOGLE_CLOUD_IDENTITY_POOL_ID }}/providers/${{ secrets.GOOGLE_CLOUD_IDENTITY_PROVIDER_ID }}"
          service_account: "${{ inputs.app_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"
          project_id: "${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"

      - name: Create Service declaration
        run: |
          if [ "${{ inputs.app }}" == "web" ]; then
            echo "There are no environment variables on the Web."
          else
            export MONGODB_USER_NAME="${{ secrets.MONGODB_USER_NAME }}"
            export MONGODB_USER_PASSWORD="${{ secrets.MONGODB_USER_PASSWORD }}"
            export MONGODB_HOST_NAME="${{ secrets.MONGODB_HOST_NAME }}"
          fi

          ## Common
          export GITHUB_SHA="${{ github.sha }}"
          export CONTAINER_IMAGE="${{ steps.set-vars.outputs.docker_image_name }}:${{ github.sha }}"
          export CLOUD_RUN_SERVICE_NAME="${{ steps.set-vars.outputs.service_name }}"
          export GOOGLE_CLOUD_PROJECT_ID="${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}"
          export GOOGLE_CLOUD_PROJECT_NUMBER="${{ secrets.GOOGLE_CLOUD_PROJECT_NUMBER }}"
          export ENVIRONMENT="${{ inputs.environment }}"
          export CLOUD_RUN_SERVICE_ACCOUNT="${{ inputs.app_name }}-app-sa@${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}.iam.gserviceaccount.com"

          envsubst < ./apps/${{ inputs.app }}/service.yaml > service-${{ inputs.environment }}.yaml

      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        timeout-minutes: 5
        with:
          service: ${{ steps.set-vars.outputs.service_name }}
          region: ${{ vars.GOOGLE_CLOUD_REGION }}
          metadata: service-${{ inputs.environment }}.yaml
          project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}
          tag: ${{ steps.set-vars.outputs.revision_tag }}
          no_traffic: ${{ inputs.environment == 'prod' && true || false }}
